---
interface ContactDetail {
  iconSrc: string;
  label: string;
  lines: string[];
  hrefs?: string[];
}

interface Props {
  sectionId?: string;

  topper: string;
  title: string;

  formAction?: string;
  submitButtonText: string;
  formHiddenFields?: Record<string, string>;
  procedureOptions?: string[];

  contactDetails: ContactDetail[];

  mapImageSrc: string;
  mapImageSrcMobile?: string;
  mapImageAlt: string;
  mapEmbedUrl?: string;

  backgroundImageSrc: string;
  backgroundImageSrcMobile?: string;
  backgroundImageAlt: string;
}

const {
  sectionId = "contact-321",
  topper,
  title,
  formAction,
  submitButtonText,
  formHiddenFields,
  procedureOptions,
  contactDetails,
  mapImageSrc,
  mapImageSrcMobile,
  mapImageAlt,
  mapEmbedUrl,
  backgroundImageSrc,
  backgroundImageSrcMobile,
  backgroundImageAlt
} = Astro.props;
---

<section id={sectionId}>
  <div class="cs-container">
    <div class="cs-right">
      <!-- ✅ Dynamic Map or Static Image -->
      {mapEmbedUrl ? (
        <div class="cs-map">
          <iframe
            src={mapEmbedUrl}
            width="100%"
            height="425"
            style="border:0;"
            allowfullscreen
            loading="lazy"
            referrerpolicy="no-referrer-when-downgrade"
          ></iframe>
        </div>
      ) : (
        <picture class="cs-map">
          <source media="(max-width: 600px)" srcset={mapImageSrcMobile ?? mapImageSrc} />
          <source media="(min-width: 601px)" srcset={mapImageSrc} />
          <img decoding="async" src={mapImageSrc} alt={mapImageAlt} width="610" height="425" aria-hidden="true" />
        </picture>
      )}

      <ul class="cs-contact-group">
        {contactDetails.map((detail) => (
          <li class="cs-item">
            <span class="cs-header">
              <img class="cs-icon" decoding="async" src={detail.iconSrc} alt="icon" width="20" height="20" />
              {detail.label}
            </span>
            {detail.hrefs && detail.hrefs.length > 0
              ? detail.hrefs.map((href, i) => (
                  <a href={href} class="cs-link">{detail.lines[i]}</a>
                ))
              : detail.lines.map((line) => <span class="cs-link">{line}</span>)}
          </li>
        ))}
      </ul>
    </div>

    <div class="cs-content">
      <span class="cs-topper">{topper}</span>
      <h2 class="cs-title">{title}</h2>

      <form class="cs-form" id="cs-form-321" name="Contact Form" method="post" action={formAction ?? "/lead/process"}>
        {formHiddenFields &&
          Object.entries(formHiddenFields).map(([name, value]) => (
            <input type="hidden" name={name} value={value as string} />
          ))
        }

        <label class="cs-label">
          First Name
          <input class="cs-input" required type="text" id="name-321" name="FirstName" placeholder="First Name" autocomplete="given-name" />
        </label>

        <label class="cs-label">
          Last Name
          <input class="cs-input" required type="text" id="last-name-321" name="LastName" placeholder="Last Name" autocomplete="family-name" />
        </label>

        <label class="cs-label cs-email">
          Email Address
          <input class="cs-input" required type="email" id="email-321" name="Email" placeholder="Email Address" autocomplete="email" />
        </label>

        <label class="cs-label cs-phone">
          Phone Number
          <input class="cs-input" required type="tel" id="phone-321" name="PhoneNumber" placeholder="Phone Number" autocomplete="tel" />
        </label>

        <label class="cs-label">
          Service Interested In:
          <input class="cs-input" required type="text" id="service-321" name="ServiceInterest" placeholder="Service Interested In" />
        </label>

        <label class="cs-label">
          Requested Consultation Date
          <input class="cs-input" required type="date" id="date-321" name="ConsultationDate" placeholder="Requested Consultation Date" />
        </label>

        <label class="cs-label">
          Requested Doctor
          <input class="cs-input" required type="text" id="doctor-321" name="RequestedDoctor" placeholder="Requested Doctor" />
        </label>

        <label class="cs-label">
          Patient Status
          <input class="cs-input" required type="text" id="patient-status-321" name="PatientStatus" placeholder="Patient Status" />
        </label>

        <label class="cs-label">
          Preferred Communication Method
          <input class="cs-input" required type="text" id="communication-method-321" name="CommunicationMethod" placeholder="Preferred Communication Method" />
        </label>

        <label class="cs-label">
          State
          <input class="cs-input" required type="text" id="state-321" name="State" placeholder="State" />
        </label>

        <label class="cs-label">
          Procedure
          <select class="cs-input" id="procedure-321" name="ProcedureList" required>
            <option value="">Select a Procedure</option>
            {(procedureOptions ?? []).map((option: string) => (
              <option value={option}>{option}</option>
            ))}
          </select>
        </label>

        <label class="cs-label">
          Message
          <textarea class="cs-input cs-textarea" required name="Message" id="message-321" placeholder="Write Message..." autocomplete="off"></textarea>
        </label>

        <button class="cs-button-solid cs-submit" type="submit">{submitButtonText}</button>
      </form>
    </div>
  </div>

  <!-- ✅ This is the section background (keep this!) -->
  <picture class="cs-background">
    <source media="(max-width: 600px)" srcset={backgroundImageSrcMobile ?? backgroundImageSrc} />
    <source media="(min-width: 601px)" srcset={backgroundImageSrc} />
    <img decoding="async" src={backgroundImageSrc} alt={backgroundImageAlt} width="275" height="132" aria-hidden="true" />
  </picture>
</section>


                                
<style>
    /*-- -------------------------- -->
<---          Contact           -->
<--- -------------------------- -*/

/* Mobile - 360px */
@media only screen and (min-width: 0rem) {
    #contact-321 {
        padding: var(--sectionPadding);
        position: relative;
        z-index: 1;
    }
    #contact-321 .cs-container {
        width: 100%;
        /* changes to 1280px at desktop */
        max-width: 34.375rem;
        margin: auto;
        display: flex;
        justify-content: center;
        align-items: flex-start;
        flex-direction: column;
        gap: 3.25rem;
    }
    #contact-321 .cs-content {
        text-align: left;
    }

    #contact-321 .cs-topper {
        color: var(--secondary);
    }
    #contact-321 .cs-title {
        color: var(--bodyTextColorWhite);
    }
    #contact-321 .cs-form {
        display: flex;
        justify-content: space-between;
        flex-wrap: wrap;
        align-items: center;
        gap: 0.75rem;
    }
    #contact-321 .cs-label {
        /* 14px - 16px */
        font-size: clamp(0.875rem, 1.5vw, 1rem);
        width: 100%;
        color: #fff;
        display: flex;
        flex-direction: column;
        justify-content: center;
        align-items: flex-start;
        gap: 0.25rem;
    }
    #contact-321 .cs-input {
        font-size: 1rem;
        width: 100%;
        height: 3.5rem;
        padding: 0;
        padding-left: 1.5rem;
        border-radius: 0.5rem;
        color: #fff;
        background: rgba(255, 255, 255, 0.12);
        backdrop-filter: blur(15px);
        border: none;
        /* prevents padding from adding to height and width */
        box-sizing: border-box;
    }
    #contact-321 .cs-input::placeholder {
        color: #f7f7f7;
        opacity: 0.5;
    }
    #contact-321 .cs-textarea {
        min-height: 7.5rem;
        padding-top: 1.5rem;
        margin-bottom: 0.75rem;
        font-family: inherit;
    }
    #contact-321 .cs-button-solid {
        font-size: 1rem;
        /* 46px - 56px */
        line-height: clamp(2.875rem, 5.5vw, 3.5rem);
        text-decoration: none;
        font-weight: 700;
        text-align: center;
        margin: 0;
        color: #fff;
        min-width: 9.375rem;
        padding: 0 1.5rem;
        background-color: var(--primary);
        border-radius: 0.25rem;
        display: inline-block;
        position: relative;
        z-index: 1;
        /* prevents padding from adding to the width */
        box-sizing: border-box;
    }
    #contact-321 .cs-button-solid:before {
        content: "";
        position: absolute;
        height: 100%;
        width: 0%;
        background: var(--primary);
        opacity: 1;
        top: 0;
        left: 0;
        z-index: -1;
        border-radius: 0.25rem;
        transition: width 0.3s;
    }
    #contact-321 .cs-button-solid:hover:before {
        width: 100%;
    }
    #contact-321 .cs-submit {
        width: 17.6875rem;
        text-transform: uppercase;
        color: var(--bodyTextColorWhite);
        background-color: var(--primary);
        border: none;
        transition: color 0.3s;
    }
    #contact-321 .cs-submit:hover {
        cursor: pointer;
        color: #fff;
    }
    #contact-321 .cs-right {
        width: 100%;
        /* 16px - 24px */
        padding: clamp(1rem, 3.5vw, 1.5rem);
        border-radius: 1.5rem;
        background-color: rgba(255, 255, 255, 0.12);
        -webkit-backdrop-filter: blur(15px);
        backdrop-filter: blur(15px);
        display: flex;
        /* prevents padding from adding to height and width */
        box-sizing: border-box;
        flex-direction: column;
        align-items: top;
        justify-content: center;
        /* 24px - 32px */
        gap: clamp(1.5rem, 4vw, 2rem);
    }
    #contact-321 .cs-map {
        width: 100%;
        /* 300px - 425px */
        height: clamp(18.75rem, 63.4vw, 26.5625rem);
        border-radius: 1.5rem;
        /* clips the corners of the img tag */
        overflow: hidden;
        position: relative;
        display: block;
    }
    #contact-321 .cs-map:before {
        content: "";
        position: absolute;
        display: block;
        /* 32px - 48px */
        width: clamp(2rem, 4vw, 3rem);
        height: clamp(2rem, 4vw, 3rem);
        background-size: contain;
        background-position: center;
        background-repeat: no-repeat;
        opacity: 1;
        /* 148px - 220px */
        top: clamp(9.25rem, 30.7vw, 13.75rem);
        /* push to the center line of the div */
        left: 50%;
        /* push X amount of pixels from it's current position off the center line */
        margin-left: 0.625rem;
        z-index: 10;
    }
    #contact-321 .cs-map img {
        position: absolute;
        top: 0;
        left: 0;
        height: 100%;
        width: 100%;
        object-fit: cover;
    }
    #contact-321 .cs-contact-group {
        padding: 0;
        margin: 0;
        display: flex;
        justify-content: center;
        align-items: flex-start;
        flex-direction: column;
        gap: 1rem;
    }
    #contact-321 .cs-item {
        list-style: none;
        display: flex;
        flex-direction: column;
        justify-content: center;
        align-items: flex-start;
    }
    #contact-321 .cs-header {
        font-size: 1.25rem;
        line-height: 1.2em;
        font-weight: 700;
        margin-bottom: 0.75rem;
        color: var(--secondaryLight);
        display: flex;
        justify-content: flex-start;
        align-items: center;
        gap: 0.25rem;
    }
    #contact-321 .cs-link {
        /* 14px - 16px */
        font-size: clamp(0.875rem, 1.5vw, 1rem);
        line-height: 1.5em;
        text-decoration: none;
        color: var(--bodyTextColorWhite);
        transition: color 0.3s;
    }
    #contact-321 .cs-background {
        width: 100%;
        height: 100%;
        position: absolute;
        top: 0;
        left: 0;
        display: block;
        z-index: -1;
    }
    #contact-321 .cs-background:before {
        /* top right box */
        content: "";
        width: 100%;
        height: 100%;
        background: var(--secondary);
        opacity: 0.85;
        position: absolute;
        display: block;
        top: 0;
        left: 0;
        z-index: 1;
    }
    #contact-321 .cs-background img {
        position: absolute;
        top: 0;
        left: 0;
        height: 100%;
        width: 100%;
        object-fit: cover;
    }
}
/* Tablet - 650px */
@media only screen and (min-width: 40.625rem) {
    #contact-321 .cs-contact-group {
        width: 100%;
        flex-direction: row;
        justify-content: space-between;
    }
}
/* Small Desktop - 1024px */
@media only screen and (min-width: 64rem) {
    #contact-321 .cs-container {
        max-width: 80rem;
        flex-direction: row;
        justify-content: space-between;
        gap: 3.25rem;
        align-items: flex-start;
    }
    #contact-321 .cs-content {
        max-width: 32.625rem;
    }
    #contact-321 .cs-title,
    #contact-321 .cs-topper {
        text-align: left;
        margin-left: 0;
    }
    #contact-321 .cs-title {
        max-width: 32.625rem;
    }
    #contact-321 .cs-email,
    #contact-321 .cs-phone {
        width: 48%;
    }
    #contact-321 .cs-button-solid {
        margin-left: 0;
    }
    #contact-321 .cs-right {
        width: 51.6%;
        max-width: 41.125rem;
        /* prevent flexbox from squishing it */
        flex: none;
             /* Add sticky positioning */
        position: -webkit-sticky;
        position: sticky;
        top: 160px;
    }
}
/* Desktop - 1300px - Parallax Effect */
@media only screen and (min-width: 81.25rem) {
    #contact-321 {
        background: url("https://assets.advancedcosmeticsurgery-sc.com/Images/Sites/A/Ascend-AdvancedCS/Aisle/30625.jpg");
        background-size: cover;
        background-position: center;
        background-repeat: no-repeat;
        /* makes parallax effect */
        background-attachment: fixed;
    }
}

.cs-topper {
    color: #fff !important;
}
</style>