---
interface ReviewIcon {
  src: string;
  alt: string;
}

interface HeroProps {
  title: string;
  description: string;
  ctaHref: string;
  ctaText: string;
  ctaIconSrc: string;

  reviewIcons: ReviewIcon[];
  reviewCount: string;
  starIconSrc: string;
  ratingText: string;

  tagText: string;
  offerTitle: string;
  offerExpires: string;
  offerSubtext: string;

  formAction?: string;
  formDisclaimer: string;
  formHiddenFields?: Record<string, string>;
  disclaimerIconSrc: string;

  backgroundImg: string;
  backgroundImgMobile: string;
}

const {
  title,
  description,
  ctaHref,
  ctaText,
  ctaIconSrc,
  reviewIcons,
  reviewCount,
  starIconSrc,
  ratingText,
  tagText,
  offerTitle,
  offerExpires,
  offerSubtext,
  formAction,
  formDisclaimer,
  disclaimerIconSrc,
  backgroundImg,
  backgroundImgMobile,
  formHiddenFields,
} = Astro.props;
---

<!-- ============================================ --><!--                    Hero                      --><!-- ============================================ -->
<section id="hero-1467">
  <div class="cs-container">
    <div class="cs-content">
      <h1 class="cs-title">{title}</h1>
      <p class="cs-text">{description}</p>
      <a href={ctaHref} class="cs-button-solid">
        <picture class="cs-card-pic">
          <img
            class="cs-card-icon"
            aria-hidden="true"
            src={ctaIconSrc}
            decoding="async"
            alt="icon"
            width="20"
            height="20"
            loading="lazy"
          />
        </picture>
        {ctaText}
      </a>

      <div class="cs-reviews" aria-hidden="true">
        <div class="cs-reviews-flex">
          {
            reviewIcons.map((icon: any) => (
              <img
                class="cs-reviews-img"
                decoding="async"
                fetchpriority="high"
                src={icon.src}
                alt={icon.alt}
                width="48"
                height="48"
              />
            ))
          }
          <span class="cs-reviews-number">{reviewCount}</span>
        </div>
      </div>

      <div class="cs-stars">
        {
          Array(5)
            .fill(null)
            .map(() => (
              <img
                class="cs-icon"
                decoding="async"
                fetchpriority="high"
                src={starIconSrc}
                alt="icon"
                width="16"
                height="16"
              />
            ))
        }
      </div>

      <p class="cs-desc">{ratingText}</p>
    </div>

    <div class="cs-right">
      <span class="cs-tag">
        {tagText}
        <span class="cs-dot" aria-hidden="true"></span>
      </span>
      <div class="cs-flex">
        <h3 class="cs-h3">{offerTitle}</h3>
        <span class="cs-expires">{offerExpires}</span>
        <p class="cs-form-text">{offerSubtext}</p>
      </div>

      <form
        class="cs-form"
        id="cs-form-1467"
        name="Contact Form"
        method="post"
        action={formAction ?? "/lead/process"}
        autocomplete="on"
        novalidate
      >
        {
          formHiddenFields &&
            Object.entries(formHiddenFields).map(([name, value]) => (
              <input type="hidden" name={name} value={value as string} />
            ))
        }

        <label class="cs-label">
          Full Name
          <input
            class="cs-input"
            required
            type="text"
            id="field-39762"
            name="FullName"
            placeholder="Full Name"
            autocomplete="name"
          />
        </label>

        <label class="cs-label">
          Date of Birth
          <input
            class="cs-input"
            required
            type="text"
            id="field-42214"
            name="Date"
            placeholder="Date of Birth"
            autocomplete="bday"
            onfocus="(this.type='date')"
            onblur="if(!this.value)this.type='text'"
          />
        </label>

        <label class="cs-label">
          Phone Number
          <input
            class="cs-input"
            required
            type="tel"
            id="field-39763"
            name="PhoneNumber"
            placeholder="Phone Number"
            autocomplete="tel"
          />
        </label>

        <label class="cs-label">
          Email Address
          <input
            class="cs-input"
            required
            type="email"
            id="field-39761"
            name="Email"
            placeholder="Email Address"
            autocomplete="email"
          />
        </label>

        <label class="cs-label">
          Preferred Communication Method
          <select class="cs-input" id="field-41679" name="List">
            <option value="">Select Preferred Method of Communication</option>
            <option value="Text">Text Message</option>
            <option value="Call">Phone Call</option>
            <option value="Email">Email</option>
          </select>
        </label>

        <label class="cs-label">
          Patient Status
          <select
            class="cs-input"
            id="field-40866"
            name="PatientStatusId"
            required
          >
            <option value="">Select a Patient Status</option>
            <option value="1">New Patient</option>
            <option value="2">Existing Patient</option>
            <option value="3">Other</option>
          </select>
        </label>

        <label class="cs-label">
          Procedure
          <select
            class="cs-input"
            id="field-41680"
            name="ProcedureList"
            required
          >
            <option value="">Select a Procedure</option>
            <option value="Acne Scar Treatment">Acne Scar Treatment</option>
            <option value="Tummy Tuck">Tummy Tuck</option>
            <option value="Facelift">Facelift</option>
            <!-- Add more as needed -->
          </select>
        </label>

        <label class="cs-label cs-message">
          Comments
          <textarea
            class="cs-input cs-textarea"
            required
            name="Comment"
            id="field-39760"
            placeholder="Write your message..."
            autocomplete="off"></textarea>
        </label>

        <label class="cs-label">
          <input type="checkbox" name="Checkbox" value="true" />
          Sign Up for Our Newsletter?
        </label>

        <button class="cs-button-solid cs-submit" type="submit">Submit</button>
      </form>

      <p class="cs-disclaimer">
        <img
          class="cs-disclaimer-icon"
          src={disclaimerIconSrc}
          alt="icon"
          width="20"
          height="20"
        />
        {formDisclaimer}
      </p>
    </div>
  </div>

  <picture class="cs-background">
    <source media="(max-width: 600px)" srcset={backgroundImgMobile} />
    <source media="(min-width: 601px)" srcset={backgroundImg} />
    <img
      loading="lazy"
      decoding="async"
      src={backgroundImg}
      alt="field"
      width="1920"
      height="1200"
      aria-hidden="true"
    />
  </picture>
</section>

<style>
  /*-- -------------------------- -->
<---           Hero             -->
<--- -------------------------- -*/

  /* Mobile - 360px */
  @media only screen and (min-width: 0rem) {
    #hero-1467 {
      /* 200px - 350px top - leaving extra space for the navigation */
      /* 100px - 200px bottom */
      padding: clamp(12.5rem, 25.95vw, 12.5em) 1rem clamp(6.25rem, 7vw, 12.5rem);
      /* prevents the topper line from causing an overflow */
      position: relative;
      z-index: 1;
    }
    #hero-1467 .cs-container {
      width: 100%;
      /* changes to 1280px at desktop */
      max-width: 44rem;
      margin: auto;
      display: flex;
      flex-wrap: wrap;
      justify-content: center;
      align-items: top;
      gap: 3rem;
    }
    #hero-1467 .cs-content {
      text-align: center;
      width: 100%;
      max-width: 35.625rem;
      display: flex;
      flex-wrap: wrap;
      justify-content: flex-start;
      flex-direction: column;
      align-items: center;
    }
    #hero-1467 .cs-flex {
      text-align: center;
      display: flex;
      flex-wrap: wrap;
      justify-content: flex-start;
      flex-direction: column;
      align-items: center;
    }
    #hero-1467 .cs-title {
      /* 39px - 49px */
      font-size: clamp(2.4375rem, 6.4vw, 3.0625rem);
      font-weight: 700;
      line-height: 1.2em;
      text-align: inherit;
      max-width: 51.8125rem;
      color: #fff;
      position: relative;
      z-index: 1;
    }
    #hero-1467 .cs-title:before {
      content: "";
      width: 3.75rem;
      height: 8px;
      margin: 0 auto 2rem;
      background: var(--primary);
      border-radius: 8px;
      opacity: 1;
      display: block;
    }
    #hero-1467 .cs-text {
      /* 16px - 20px */
      font-size: clamp(1rem, 1.95vw, 1.25rem);
      line-height: 1.5em;
      text-align: inherit;
      width: 100%;
      /* 464px - 622px */
      max-width: clamp(29rem, 60vw, 38.785rem);
      margin: 0;
      margin-bottom: 2rem;
      color: #fff;
    }
    #hero-1467 .cs-button-solid {
      font-size: 1.2rem;
      /* 46px - 56px */
      line-height: clamp(2.875rem, 5.5vw, 1.75rem);
      text-decoration: none;
      font-weight: 700;
      text-align: center;
      margin: 0;
      color: #fff;
      min-width: 12.5rem;
      padding-right: 20px;
      padding-top: 8px;
      padding-bottom: 8px;
      padding-left: 8px;
      background-color: var(--primary);
      border-radius: 0.5rem;
      overflow: hidden;
      display: inline-flex;
      justify-content: center;
      align-items: center;
      position: relative;
      z-index: 1;
      /* prevents padding from adding to the width */
      box-sizing: border-box;
    }
    #hero-1467 .cs-button-solid:before {
      content: "";
      position: absolute;
      height: 100%;
      width: 0%;
      background: var(--secondary);
      opacity: 0.3;
      top: 0;
      left: 0;
      z-index: -1;
      transition: width 0.3s;
    }
    #hero-1467 .cs-button-solid:hover:before {
      width: 100%;
    }
    #hero-1467 .cs-reviews {
      /* 40px - 80px */
      margin-top: clamp(2.5rem, 6vw, 5rem);
      /* prevents padding and border from affecting height and width */
      box-sizing: border-box;
      border-radius: 0.75rem;
      box-shadow: 0px 8px 100px 0px rgba(0, 0, 0, 0.08);
      display: inline-flex;
      justify-content: flex-start;
      align-items: flex-start;
      flex-direction: column;
      /* 8px - 16px */
      gap: clamp(0.5rem, 2vw, 1rem);
      position: relative;
      z-index: -1;
    }
    #hero-1467 .cs-reviews-flex {
      margin-bottom: 1rem;
      display: flex;
      justify-content: flex-start;
      align-items: center;
    }
    #hero-1467 .cs-stars {
      margin: 0 0 0.5rem 0;
      display: flex;
      justify-content: center;
      align-items: center;
      gap: 2px;
    }
    #hero-1467 .cs-icon {
      width: 1rem;
      height: auto;
    }
    #hero-1467 .cs-desc {
      font-size: var(--bodyFontSize);
      line-height: 1.5em;
      text-align: inherit;
      max-width: 20ch;
      margin: 0;
      color: #f7f7f7;
    }
    #hero-1467 .cs-reviews-img {
      width: 3rem;
      height: auto;
      margin: 0 -1rem 0 0;
      border-radius: 50%;
      border: 1px solid #fff;
      background-color: #fff;
    }
    #hero-1467 .cs-reviews-number {
      font-size: 1rem;
      font-weight: 700;
      width: 3rem;
      height: 3rem;
      background-color: #fbc02d;
      color: var(--bodyTextColorWhite);
      border-radius: 50%;
      display: flex;
      justify-content: center;
      align-items: center;
    }
    #hero-1467 .cs-right {
      text-align: center;
      width: 100%;
      /* 16px - 48px left & right */
      /* 32px - 48px top & bottom */
      padding: clamp(2rem, 5vw, 3rem) clamp(1rem, 4vw, 3rem);
      box-sizing: border-box;
      border-radius: 1.5rem;
      border-top: 8px solid var(--primary);
      background-color: #fff;
      display: flex;
      justify-content: center;
      flex-direction: column;
      align-items: center;
      position: relative;
      z-index: 1;
    }
    #hero-1467 .cs-tag {
      font-size: 0.75rem;
      text-transform: uppercase;
      font-weight: 700;
      letter-spacing: 0.1em;
      line-height: 1.75rem;
      padding: 0 2rem 0 1.75rem;
      overflow: hidden;
      color: var(--bodyTextColorWhite);
      border-radius: 2.5rem;
      display: inline-block;
      position: absolute;
      top: 0.5rem;
      right: 0;
      z-index: 1;
      transform: rotate(14deg);
      transform-origin: right;
    }
    #hero-1467 .cs-tag:before {
      /* background color */
      content: "";
      height: 100%;
      background: var(--secondary);
      opacity: 1;
      position: absolute;
      display: block;
      top: 0;
      left: 0;
      right: 20px;
      z-index: -1;
    }
    #hero-1467 .cs-tag:after {
      /* triangle */
      content: "";
      width: 1.5625rem;
      height: 1.5625rem;
      background-color: var(--secondary);
      opacity: 1;
      overflow: hidden;
      position: absolute;
      display: block;
      top: 50%;
      right: 0.375rem;
      z-index: -1;
      transform: translateY(-50%) rotate(45deg);
    }
    #hero-1467 .cs-dot {
      width: 0.5rem;
      height: 0.5rem;
      background-color: #fff;
      border-radius: 50%;
      position: absolute;
      right: 0.9375rem;
      top: 50%;
      transform: translateY(-50%);
    }
    #hero-1467 .cs-h3 {
      /* 31px - 39px */
      font-size: clamp(1.9375rem, 4vw, 2.4375rem);
      font-weight: 900;
      text-align: inherit;
      max-width: 20ch;
      margin: 0 0 0.5rem 0;
      color: var(--headerColor);
    }
    #hero-1467 .cs-expires {
      font-size: 1rem;
      line-height: 1.5em;
      text-align: inherit;
      margin: 0 0 1rem 0;
      color: var(--secondary);
      display: block;
    }
    #hero-1467 .cs-form-text {
      font-size: var(--bodyFontSize);
      line-height: 1.5em;
      text-align: inherit;
      width: 100%;
      max-width: 40.625rem;
      margin: 0 0 1.5rem 0;
      color: var(--bodyTextColor);
    }
    #hero-1467 .cs-form {
      width: 100%;
      display: flex;
      justify-content: space-between;
      flex-wrap: wrap;
      align-items: center;
      gap: 1rem;
    }
    #hero-1467 .cs-label {
      font-size: 0.875rem;
      width: 100%;
      color: #767676;
      display: flex;
      flex-direction: column;
      justify-content: center;
      align-items: flex-start;
      gap: 0.25rem;
    }
    #hero-1467 .cs-input,
    #hero-1467 select {
      font-size: 1rem;
      width: 100%;
      height: 3.5rem;
      padding: 0;
      padding-left: 1.5rem;
      color: var(--bodyTextColor);
      background-color: #f7f7f7;
      border: none;
      border-radius: 0.5rem;
      /* prevents padding from adding to height and width */
      box-sizing: border-box;
      transition: border-color 0.3s;
    }
    #hero-1467 .cs-input:hover,
    #hero-1467 select:hover {
      border-color: var(--secondary);
    }
    #hero-1467 .cs-input:focus,
    #hero-1467 select:focus {
      outline: 1px solid var(--secondary);
    }
    #hero-1467 .cs-input::placeholder,
    #hero-1467 select::placeholder {
      color: #7d799c;
      opacity: 0.6;
    }
    #hero-1467 .cs-textarea {
      min-height: 5.9375rem;
      padding-top: 1.5rem;
      margin-bottom: 0.75rem;
      font-family: inherit;
    }
    #hero-1467 .cs-submit {
      text-transform: uppercase;
      width: 100%;
      margin: 0 0 1rem 0;
      border: none;
    }
    #hero-1467 .cs-submit:hover {
      cursor: pointer;
    }
    #hero-1467 .cs-disclaimer {
      font-size: 0.875rem;
      text-align: left;
      line-height: 1.5em;
      margin: 0 auto 0 0;
      color: var(--bodyTextColor);
      display: flex;
      justify-content: flex-start;
      align-items: flex-start;
      gap: 0.25rem;
    }
    #hero-1467 .cs-disclaimer-icon {
      width: 1.25rem;
      height: auto;
    }
    #hero-1467 .cs-background {
      width: 100%;
      height: 100%;
      display: block;
      position: absolute;
      top: 0;
      left: 0;
      z-index: -2;
    }
    #hero-1467 .cs-background:before {
      /* Overlay */
      content: "";
      width: 100%;
      height: 100%;
      background: #010203;
      opacity: 0.72;
      position: absolute;
      display: block;
      top: 0;
      left: 0;
      z-index: 1;
      /* prevents the cursor from interacting with it */
      pointer-events: none;
    }
    #hero-1467 .cs-background img {
      position: absolute;
      top: 0;
      left: 0;
      height: 100%;
      width: 100%;
      object-fit: cover;
    }
    #hero-1467 .cs-card-pic {
      /* 46px - 56px */
      width: clamp(2.875rem, 6vw, 3.5rem);
      height: clamp(2.875rem, 6vw, 3.5rem);
      margin: -2px;
      border-radius: 50%;
      display: flex;
      justify-content: center;
      align-items: center;
      position: relative;
      z-index: 1;
      flex: none;
    }
    #hero-1467 .cs-card-icon {
      width: 1.5rem;
      height: auto;
      display: block;
    }
  }
  /* Tablet - 768px */
  @media only screen and (min-width: 48rem) {
    #hero-1467 .cs-form {
      display: grid;
      grid-template-columns: repeat(12, 1fr);
    }
    #hero-1467 .cs-label {
      grid-column: span 12;
    }
    #hero-1467 .cs-label:nth-of-type(1),
    #hero-1467 .cs-label:nth-of-type(2),
    #hero-1467 .cs-label:nth-of-type(3),
    #hero-1467 .cs-label:nth-of-type(4) {
      grid-column: span 6;
    }
    #hero-1467 .cs-submit {
      grid-column: span 12;
    }
  }
  /* Desktop - 1024px */
  @media only screen and (min-width: 64rem) {
    #hero-1467 .cs-container {
      max-width: 80rem;
      flex-direction: row;
      flex-wrap: nowrap;
      justify-content: space-between;
      /* This allows the sticky item to have a reference */
      align-items: flex-start;
    }
    #hero-1467 .cs-right {
      align-items: flex-start;
    }
    #hero-1467 .cs-title:before {
      margin-left: 0;
    }
    #hero-1467 .cs-content {
      /* Make this column sticky */
      position: -webkit-sticky;
      position: sticky;
      top: 180px; /* Adjust this value to add space from the top */

      /* Existing styles */
      text-align: left;
      align-items: flex-start;
    }
    #hero-1467 .cs-flex {
      text-align: left;
      align-items: flex-start;
    }
  }
  /* Desktop Parallax Effect - 1600px */
  @media only screen and (min-width: 100rem) {
    #hero-1467 {
      background: url("https://assets.doctorlogic.com/Images/Sites/A/Ascend-HeddenGunn/MasterPage/1420427.jpg");
      background-size: cover;
      background-position: top;
      background-repeat: no-repeat;
      background-attachment: fixed;
    }
    #hero-1467 .cs-background img {
      display: none;
    }
  }
</style>
